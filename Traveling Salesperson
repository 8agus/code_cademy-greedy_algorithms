import random
from random import randrange

class Graph:
  def __init__(self, directed=False):
    self.graph_dict = {}
    self.directed = directed

  def add_vertex(self, vertex):
    self.graph_dict[vertex.value] = vertex

  def add_edge(self, from_vertex, to_vertex, weight=0):
    self.graph_dict[from_vertex.value].add_edge(to_vertex.value, weight)
    if not self.directed:
      self.graph_dict[to_vertex.value].add_edge(from_vertex.value, weight)

  def find_path(self, start_vertex, end_vertex):
    start = [start_vertex]
    seen = {}
    while len(start) > 0:
      current_vertex = start.pop(0)
      seen[current_vertex] = True
      print("Visiting " + current_vertex)
      if current_vertex == end_vertex:
        return True
      else:
        vertices_to_visit = set(self.graph_dict[current_vertex].edges.keys())
        start += [vertex for vertex in vertices_to_visit if vertex not in seen]
    return False

class Vertex:
  def __init__(self, value):
      self.value = value
      self.edges = {}

  def add_edge(self, vertex, weight=0):
      self.edges[vertex] = weight

  def get_edges(self):
      return list(self.edges.keys())

  def get_edge_weight(self, edge):
      return self.edges[edge]


def print_graph(graph):
  for vertex in graph.graph_dict:
    print("")
    print(vertex + " connected to")
    vertex_neighbors = graph.graph_dict[vertex].edges
    if len(vertex_neighbors) == 0:
      print("No edges!")
    for adjacent_vertex in vertex_neighbors:
      print("=> " + adjacent_vertex, graph.graph_dict[vertex].get_edge_weight(adjacent_vertex))


def build_tsp_graph(directed):
    g = Graph(directed)
    vertices = []
    for val in ['a', 'b', 'c', 'd']:
        vertex = Vertex(val)
        vertices.append(vertex)
        g.add_vertex(vertex)

    g.add_edge(vertices[0], vertices[1], 3)
    g.add_edge(vertices[0], vertices[2], 4)
    g.add_edge(vertices[0], vertices[3], 5)
    g.add_edge(vertices[1], vertices[0], 3)
    g.add_edge(vertices[1], vertices[2], 2)
    g.add_edge(vertices[1], vertices[3], 6)
    g.add_edge(vertices[2], vertices[0], 4)
    g.add_edge(vertices[2], vertices[1], 2)
    g.add_edge(vertices[2], vertices[3], 1)
    g.add_edge(vertices[3], vertices[0], 5)
    g.add_edge(vertices[3], vertices[1], 6)
    g.add_edge(vertices[3], vertices[2], 1)
    print(print_graph(g))
    return g


# Define your functions below:
def visited_all_nodes(visited_vertices):
    for vertex in visited_vertices:
        if visited_vertices[vertex] == "unvisted":
            return False
    return True

def get_path_weight(graph, ele, start):
    lst = start + ele
    sum = 0
    sum += graph.graph_dict[start].get_edge_weight(ele)
    next_item = ele
    for item in graph.graph_dict[ele].get_edges():
        if item not in lst:
            lst += item
            sum += graph.graph_dict[next_item].get_edge_weight(item)
            next_item = item
    return_to_begining = lst[-1]
    sum += graph.graph_dict[return_to_begining].get_edge_weight(start)

    return lst, sum


def traveling_salesperson(graph):
    current_vertex = random.choice(list(graph.graph_dict))
    current_vertex_edge_weights = {}
    path = graph.graph_dict[current_vertex].get_edges()
    for ele in path:
        letters, numbers = get_path_weight(graph, ele, current_vertex)
        current_vertex_edge_weights[letters] = numbers

    return min(current_vertex_edge_weights.keys())


graph = build_tsp_graph(False)
shortest_path = traveling_salesperson(graph)
print(f"\n\nShortest path to travel is: {shortest_path}")
